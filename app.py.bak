# Importing flask module in the project is mandatory
# An object of Flask class is our WSGI application.
from flask import Flask
from flask import render_template
from flask import request
import pyrebase
import firebase_admin
from firebase_admin import credentials,firestore
 
check=0
pcondition=0
mcondition=0
activity=0
mobility=0
# Firebase dictionary
firebaseConfig = {
  'apiKey': "AIzaSyCQpScIjG2PrZ3DmiiJDocPxJZ8hny7CDU",
  'authDomain': "pals-project-2ebba.firebaseapp.com",
  'projectId': "pals-project-2ebba",
  'storageBucket': "pals-project-2ebba.appspot.com",
  'messagingSenderId': "660052777168",
  'appId': "1:660052777168:web:aa85f4b1f5422b1747a6d5",
  'measurementId': "G-SYQS2HJ8RS",
  "databaseURL": ""
}

firebase = pyrebase.initialize_app(firebaseConfig)
auth = firebase.auth()
cred = credentials.Certificate('serviceAccountKey.json')
firebase_admin.initialize_app(cred)
db = firestore.client()

#person datas
data = [[2,"ram","78%","82"],[3,"prem","38%","65"],[4,"ramesh","38%","42"],[5,"auresh","78%","96"]]
patientdata = [["yaro","Highly vulnerable","78%"],["deepika","Less vulnerable","38%"]]
datas = []
data=[]
#index html
app = Flask(__name__)
@app.route('/')
@app.route('/home')
@app.route('/index')
def home():
	return render_template('index.html')#,text=1)

@app.route('/register')
def register():
	return render_template('register.html',message='')


@app.route('/login')
def login():
	return render_template('login.html',message='')

#signup
@app.route('/confirm',methods=['POST','GET'])
def signup():
	global check
	if request.method == 'POST':
		email = request.form.get('email')
		password = request.form.get('password')
	try:
		auth.create_user_with_email_and_password(email, password)
		auth.sign_in_with_email_and_password(email, password)
		check=1
		return render_template('hospital.html',name=email)
	except:
		print("\nWrong  ",email)
		if(len(password)<=6):
			message = 'Unable to signup, Length of password must be greater than or equal to 6'
		else:
			message = 'Unable to signup. Email id already exist or Invalid EMail ID'
		return render_template('register.html',message = message)
	
#login
@app.route('/confirm1',methods=['POST','GET'])
def log():
	global check
	if request.method == 'POST':
		email = request.form.get('email')
		password = request.form.get('password')
	#try:
		auth.sign_in_with_email_and_password(email, password)
		print("\n",email,' ',password)
		check=1
		res = db.collection('hospital').get()
		i=0
		temp=[]
		data=[]
		print(data)
		for doc in res:
			i=i+1
			print(data)
			doc=doc.to_dict()
			temp.append(i)
			temp.append(doc['name'])
			temp.append(doc['age'])
			inp=str(doc['ulcer'])+'%'
			print(inp)
			temp.append(inp)
			inp=str(doc['requiredact'])
			temp.append(inp)
			data.append(temp)
			temp=[]
				
		print(data)
		return render_template('hospital.html',data=data)
	# except:
	# 	print("inini")
	# 	return render_template('login.html',message = 'Invalid Email id or password')


#display patient info
@app.route('/patient',methods=['POST','GET'])
def patient():
	global id,datas,data
	res = db.collection('hospital').get()
	i=1
	for doc in res:
		i=i+1
		doc=doc.to_dict()
		temp=[]
		temp.append(i)
		temp.append(doc['name'])
		temp.append(doc['age'])
		temp.append(doc['heart'])
		temp.append(doc['mois'])
		temp.append(doc['temp'])
		data.append(temp)
		temp=[]
	id=str(1)
	result = db.collection('hospital').document(id).get()
	result = result.to_dict()
	datas=[]
	datas.append(result['name'])
	datas.append(result['dob'])
	datas.append(result['age'])
	datas.append(result['pnum'])
	datas.append(result['dhis'])
	datas.append(result['skdishis'])
	datas.append(result['ulbef'])
	datas.append(result['skm'])
	datas.append(result['sllergictomedicine'])
	datas.append(result['spo2'])
	datas.append(result['mois'])
	datas.append(result['temp'])
	datas.append(result['force'])
	datas.append(result['ulcer'])
	datas.append(result['requiredact'])
	datas.append(result['nortonulcer'])
	f = open("static/txt/dummy.txt", "w")
	f.write("                                                                           PATIENT ULCER PREDICTION REPORT")
	f.write("\n                                                                      THIS REPORT IS GENERATED BY IPUPS TEAM")
	f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
	f.write("\n                                                                 SECTION : 1                           PATIENT BIO-DATA")
	f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
	f.write("\n\n                PATIENT NAME"+'  :  '+datas[0])
	f.write("                                                                        PATIENT DATE OF BIRTH"+'  :  '+str(datas[1]))
	f.write("\n                PATIENT AGE"+'   :  '+str(datas[2]))
	f.write("                                                                            PHONE NUMBER"+'           :  '+str(datas[3]))
	f.write("\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
	f.write("\n                                                                SECTION : 2                       PATIENT MEDICAL HISTORY")
	f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
	f.write("\n\n              PATIENT HAVE DIABETICS ?"+'              :  '+str(datas[4]))
	f.write("\n              PATIENT HAVE SKIN DISEASES ?"+'          :  '+str(datas[5]))
	f.write("\n              PATIENT HAD PRESSURE ULCER BEFORE ?"+'   :  '+str(datas[6]))
	f.write("\n              PATIENT SENSITIVE TO ANY MEDICINE ?"+'   :  '+str(datas[7]))
	f.write("\n              PATIENT ALLERGIC TO ANY MEDICINE ?"+'    :  '+str(datas[8]))
	# f.write("\nPATIENT ALLERGIC TO ANY MEDICINE"+'  :  '+datas[1])
	f.write("\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
	f.write("\n                                                               SECTION : 3                   PATIENT CURRENT MEDICAL REPORT")
	f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
	f.write("\n\n              PATIENT OXYGEN SATURATION LEVEL"+'       :  '+str(datas[9]))
	f.write("\n              HUMIDITY"+'                              :  '+str(datas[10]))
	f.write("\n              BODY TEMPERATURE"+'                      :  '+str(datas[11]))
	f.write("\n              FORCE APPLIED"+'                         :  '+str(datas[12]))
	f.write("\n              PREDICTION PERCENTAGE"+'                 :  '+str(datas[13]))
	f.write("\n              REQUIRED ACTION "+'                      :  '+str(datas[14]))
	f.write("\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
	f.close()

		# id=id+'.txt'
	if check ==1:
		return render_template('patient.html',patientdata=patientdata,text=1,data=data)
	else:
		return render_template('login.html',patientdata=patientdata)#name=patientdata[id][1])


#norton chart
@app.route('/norton',methods=['POST','GET'])
def norton():
	
	global mcondition
	global pcondition
	global activity
	global mobility
	if request.method == 'POST':
		mcondition = request.form.get('mcondition')
		datas.append(mcondition)
		print(mcondition)
		pcondition = request.form.get('pcondition')
		datas.append(pcondition)
		activity = request.form.get('activity')
		datas.append(activity)
		mobility = request.form.get('mobility')
		datas.append(mobility)
	
	datas.append(mcondition)
	datas.append(pcondition)
	datas.append(activity)
	datas.append(mobility)
	if check ==1:
		if int(mcondition)>0 :
			f = open("static/txt/dummy1.txt", "w")
			f.write("                                                                  PATIENT ULCER PREDICTION REPORT WITH NORTON SCALE VALUES")
			f.write("\n                                                                        THIS REPORT IS GENERATED BY IPUPS TEAM")
			f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
			f.write("\n                                                                 SECTION : 1                          PATIENT BIO-DATA")
			f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
			f.write("\n\n            PATIENT NAME"+'  :  '+datas[0])
			f.write("                                                                        PATIENT DATE OF BIRTH"+'  :  '+str(datas[1]))
			f.write("\n            PATIENT AGE"+'   :  '+str(datas[2]))
			f.write("                                                                                PHONE NUMBER"+'         :  '+str(datas[3]))
			f.write("\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
			f.write("\n                                                                SECTION : 2                       PATIENT MEDICAL HISTORY")
			f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
			f.write("\n\n              PATIENT HAVE DIABETICS ?"+'            :  '+str(datas[4]))
			f.write("\n              PATIENT HAVE SKIN DISEASES?"+'         :  '+str(datas[5]))
			f.write("\n              PATIENT HAD PRESSURE ULCER BEFORE?"+'  :  '+str(datas[6]))
			f.write("\n              PATIENT SENSITIVE TO ANY MEDICINE"+'   :  '+str(datas[7]))
			f.write("\n              PATIENT ALLERGIC TO ANY MEDICINE"+'    :  '+str(datas[8]))
			# f.write("\nPATIENT ALLERGIC TO ANY MEDICINE"+'  :  '+datas[1])
			f.write("\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
			f.write("\n                                                               SECTION : 3                   PATIENT CURRENT MEDICAL REPORT")
			f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
			f.write("\n\n              PATIENT MOBILITY CONDITION"+'          :  '+mobility)
			f.write("\n              PATIENT MENTAL CONDITION"+'            :  '+mcondition)
			f.write("\n              PATIENT ACTIVITY STATUS"+'             :  '+activity)
			f.write("\n              PATIENT PHYSICAL CONDITION"+'          :  '+mcondition)
			f.write("\n              PATIENT OXYGEN SATURATION LEVEL"+'     :  '+str(datas[9]))
			f.write("\n              HUMIDITY"+'                            :  '+str(datas[10]))
			f.write("\n              BODY TEMPERATURE"+'                    :  '+str(datas[11]))
			f.write("\n              FORCE APPLIED"+'                       :  '+str(datas[12]))
			f.write("\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
			f.write("\n                                                               SECTION : 4                          NORTON REPORT")
			f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
			f.write("\n              THE NORTON SCORE FOR THE PATIENT           :   "+str(int(mcondition)+int(pcondition)+int(activity)+int(mobility)+(int(int(datas[13])*24/100))))
			f.write("\n              PREDICTION PERCENTAGE"+'               :  '+str(int(datas[13])+10))
			f.write("\n              REQUIRED ACTION "+'                    :  '+str(datas[14]))
			f.write("\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
			f.close()
			return render_template('norton.html',patientdata=patientdata,text=1,data=data)
		else:
			return render_template('norton.html',patientdata=patientdata)

	else:
		return render_template('login.html',patientdata=patientdata)#name=patientdata[id][1])



app.run(debug = True)

